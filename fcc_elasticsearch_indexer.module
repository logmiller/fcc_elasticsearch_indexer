<?php

# Declare Constants
define( 'DEFAULT_CLUSTER_ID', 'elasticsearch' ); // TODO make dynamic?
define( 'ES_NODE_ID', 'fccnn' );

/**
 * Prepares a node to be added to elastic
 *
 * @param $node
 * @return array
 */
function _fcc_elasticsearch_indexer_prepare_node( $node ) {

	if ( ! is_object( $node ) ) {
		return;
	}

	//pc_init_pc(); // TODO remove or comment out for staging/production
	//pc( $node, '$node' ); // TODO remove or comment out for staging/production

	$nid = $node->nid;
	$uid = $node->uid;

	$params = array(
		'index' => ES_NODE_ID, // NOTE: this may stay static for the sake of a flat index
		'type' => $node->type,
		'id' => $node->nid,
		'body' => array(),
	);

	// Add the simple properties
	$wanted = array( 'nid', 'title', 'uid', 'name', 'picture', 'created', 'changed', 'revision_timestamp', 'vid', 'revision_uid', 'type', 'status', 'promote', 'sticky', 'domain_site' );
	$exist = array_filter( $wanted, function( $property ) use ( $node ) {
		return property_exists( $node, $property );
	});
	foreach ( $exist as $field ) {
		$params['body'][ $field ] = $node->{$field};
	}

	// Add the article 'URL' link // NOTE leave protocol off for now
	if ( ! empty( $node->field_override_url ) ) {
		$url = $node->field_override_url[ $node->language ][0]['value']; // URL Override
	} else {
		$url = url( 'node/' . $nid ); // No URL Override
	}
	if ( $url ) {
		$params['body']['path'] = $url;
		$params['body']['url'] = $_SERVER['HTTP_HOST'] . $url;
	}

	// Add the 'Published' date field (if it exists)
	if ( $node->workbench_moderation->published ) {
		//$published = date( 'Y-m-d', $node->workbench_moderation->published->timestamp );
		$published = $node->workbench_moderation->published->timestamp;
		$params['body']['published'] = $published;
	}

	// Add the 'Author' fields // TODO Expand This
	$author = fcc_es_get_author_fields( $nid, $uid );
	if ( $author ) {
		$params['body']['author'] = $author;
	}

	// Add the 'Category' field (if it exists) // TODO Expand This
	$category_field = isset( $node->field_category ) ? field_get_items( 'node', $node, 'field_category' ) : false;
  if ( $category_field ) {
		$params['body']['category'] = NULL;
	}

	// Add the 'Tags' field (if it exists) // TODO Expand This
	$tags_field = isset( $node->field_tags ) ? field_get_items( 'node', $node, 'field_tags' ) : false;
	if ( $tags_field ) {
		$params['body']['tags'] = NULL;
	}

	// Add the 'Body' field (if it exists)
	$body_field = isset( $node->body ) ? field_get_items( 'node', $node, 'body' ) : false;
	if ( $body_field ) {
		$params['body']['body'] = $body_field;
	}

	// Add the 'Image' field (if it exists)
	$image_field = isset( $node->field_image ) ? field_get_items( 'node', $node, 'field_image' ) : false;
	if ( $image_field ) {
		$params['body']['field_image'] = array_map( function( $img ) {
			$img_alt = $img['alt'];
			$img_description = $img['description'];
			$img = file_load( $img['fid'] );
			$img->url = ( ! empty( $image_field[0]['uri'] ) ) ? file_create_url( $img_uri[0]['uri'] ) : file_create_url( $img->uri );
			$img->full_1000 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( 'full_1000', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->featured_860 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( '16x9_860', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->featured_620 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( '16x9_620', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->featured_430 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( '16x9_430', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->featured_315 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( '16x9_315', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->square_300 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( 'square_300', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->medium = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( 'medium', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->image_caption = htmlentities( $img_alt, ENT_QUOTES, 'UTF-8' );
			$img->image_description = $img_description;
			return $img;
		}, $image_field);
	}
	return $params;
}

/**
 * Converts node entity type to document.
 *
 * @param type $index
 * @param type $offset
 * @param type $batch_size
 * @return array
 */
function _fcc_elasticsearch_indexer_node_entity_to_documents($index, $offset, $batch_size) {
    $query = new \EntityFieldQuery();

    $result = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'article')
        ->propertyOrderBy('created', 'DESC')
        ->range($offset, $batch_size)
        ->execute();

    // Ensure we've got some node results.
    if (!isset($result['node'])) {
        drush_log("No nodes to process.", "ok");
        return;
    }

    // Add the ids with the entity type to the $entities array
    $ids = array_keys($result['node']);

    // Load entities
    $entities = entity_load('node', $ids);

    // Build document array
    // Notice: Command and Content arrays must be separated for bulk indexing to work.
    $document = array();
    foreach ($entities as $entity) {

        //Field Override URL
        if (!empty($entity->field_override_url)) {
            $url = $entity->field_override_url[LANGUAGE_NONE][0]['value']; // URL Override
        }
        else {
            $url = url('node/' . $entity->nid);
        }

        //Field Taxonomy
        $taxonomy = fcc_es_get_taxonomy_terms($entity);

        //Field Author
        $author = fcc_es_get_author_fields($entity->nid, $entity->uid);

        //Field Image
        $image_field = $entity->field_image[LANGUAGE_NONE];
        if (!empty($image_field)) {
            $images = array_map(function( $img ) {
                $img_alt = $img['alt'];
                $img_description = $img['description'];
                $img = file_load($img['fid']);
                $img->url = (!empty($image_field[0]['uri']) ) ? file_create_url($img_uri[0]['uri']) : file_create_url($img->uri);
                $img->full_1000 = (!empty($image_field[0]['uri']) ) ? image_style_url('full_1000', $image_field[0]['uri']) : file_create_url($img->uri);
                $img->featured_860 = (!empty($image_field[0]['uri']) ) ? image_style_url('16x9_860', $image_field[0]['uri']) : file_create_url($img->uri);
                $img->featured_620 = (!empty($image_field[0]['uri']) ) ? image_style_url('16x9_620', $image_field[0]['uri']) : file_create_url($img->uri);
                $img->featured_430 = (!empty($image_field[0]['uri']) ) ? image_style_url('16x9_430', $image_field[0]['uri']) : file_create_url($img->uri);
                $img->featured_315 = (!empty($image_field[0]['uri']) ) ? image_style_url('16x9_315', $image_field[0]['uri']) : file_create_url($img->uri);
                $img->square_300 = (!empty($image_field[0]['uri']) ) ? image_style_url('square_300', $image_field[0]['uri']) : file_create_url($img->uri);
                $img->medium = (!empty($image_field[0]['uri']) ) ? image_style_url('medium', $image_field[0]['uri']) : file_create_url($img->uri);
                $img->image_caption = htmlentities($img_alt, ENT_QUOTES, 'UTF-8');
                $img->image_description = $img_description;
                return $img;
            }, $image_field);
        }

        //Document: Command
        $document['body'][] = array(
          'index' => array(
            '_index' => $index, // TODO make dynamic for property name
            '_type' => $entity->type,
            '_id' => $entity->nid,
          ),
        );
        //Document: Content
        $document['body'][] = array(
          // Default
          'nid' => $entity->nid,
          'title' => $entity->title,
          'uid' => $entity->uid,
          'name' => $author['name'],
          'picture' => $entity->picture,
          'created' => $entity->created,
          'changed' => $entity->changed,
          'revision_timestamp' => $entity->revision_timestamp,
          'vid' => $entity->vid,
          'revision_uid' => $entity->revision_uid,
          'type' => $entity->type,
          'status' => $entity->status,
          'promote' => $entity->promote,
          'sticky' => $entity->sticky,
          'path' => $url, //TODO
          'url' => $_SERVER['HTTP_HOST'] . $url, //TODO
          'author' => $author,
          //Custom Fields
          'current' => $entity->workbench_moderation['current'],
          'published' => $entity->workbench_moderation['published'],
          'my_revision' => $entity->workbench_moderation['my_revision'],
          'newspaper' => $entity->field_newspaper[LANGUAGE_NONE],
          'google_drive_document_id' => $entity->field_google_drive_document_id[LANGUAGE_NONE],
          'category' => $taxonomy['categories'],
          'tags' => $taxonomy['tags'],
          'body' => $entity->body[LANGUAGE_NONE][0],
          'field_image' => $images,
        );
    }

    return $document;
}

/**
 * Helper function that returns a node from Elastic by its nid.
 *
 * @param $client
 * @param $node
 * @return mixed
 */
function _fcc_elasticsearch_indexer_perform_node_search_by_id( $client, $node ) {
	$search = array(
		'index' => ES_NODE_ID, // TODO make dynamic for property name
		'type' => $node->type,
		'version' => true,
		'body' => array(
		  'query' => array(
		    'match' => array(
		      'nid' => $node->nid,
		    ),
		  ),
		),
	);

	return $client->search( $search );
}

/**
 * Implements hook_node_insert().
 */
function fcc_elasticsearch_indexer_node_insert( $node ) {
	$client = elasticsearch_connector_get_client_by_id( DEFAULT_CLUSTER_ID );
	$params = _fcc_elasticsearch_indexer_prepare_node( $node );

	if ( ! $params ) {
		drupal_set_message( t( 'There was a problem saving this node to Elastic.' ) );
		return;
	}

	$result = $client->index( $params );
	if ( $result && $result['created'] === false ) {
		drupal_set_message( t( 'There was a problem saving this node to Elastic.' ) );
		return;
	}

	drupal_set_message( t( 'The node has been saved to Elastic.' ) );
}

/**
 * Implements hook_node_update().
 */
function fcc_elasticsearch_indexer_node_update( $node ) {
	if ( $node->is_new !== false ) {
		return;
	}

	$client = elasticsearch_connector_get_client_by_id( DEFAULT_CLUSTER_ID );
	$params = _fcc_elasticsearch_indexer_prepare_node( $node );

	if ( ! $params ) {
		drupal_set_message( t( 'There was a problem updating this node in Elastic.' ) );
		return;
	}

	$result = _fcc_elasticsearch_indexer_perform_node_search_by_id( $client, $node );
	if ( $result && $result['hits']['total'] !== 1 ) {
		drupal_set_message( t( 'There was a problem updating this node in Elastic.' ) );
		return;
	}

	$params['id'] = $result['hits']['hits'][0]['_id'];
	$version = $result['hits']['hits'][0]['_version'];
	$index = $client->index( $params );

	if ( $index['_version'] !== $version + 1 ) {
		drupal_set_message( t( 'There was a problem updating this node in Elastic.' ) );
		return;
	}

	drupal_set_message( t( 'The node has been updated in Elastic.' ) );
}

/**
 * Implements hook_node_delete().
 */
function fcc_elasticsearch_indexer_node_delete( $node ) {
	$client = elasticsearch_connector_get_client_by_id( DEFAULT_CLUSTER_ID );

	// If the node is in Elastic, remove it
	$result = _fcc_elasticsearch_indexer_perform_node_search_by_id( $client, $node );
	if ( $result && $result['hits']['total'] !== 1 ) {
		drupal_set_message( t( 'There was a problem deleting this node in Elastic.' ) );
		return;
	}

	$params = array(
	  'index' => ES_NODE_ID, // TODO make dynamic for property name
	  'type' => $node->type,
	  'id' => $result['hits']['hits'][0]['_id'],
	);

	$result = $client->delete( $params );
	if ( $result && $result['found'] !== true ) {
		drupal_set_message( t( 'There was a problem deleting this node in Elastic.' ) );
		return;
	}

	drupal_set_message( t( 'The node has been deleted in Elastic.' ) );
}


/*------------------------------------------------------------------------------
# FCC Custom Retrieval Functions
------------------------------------------------------------------------------*/

/**
 * Retrieve the author fields.
 * @param type $nid
 * @param type $uid
 */
function fcc_es_get_author_fields($nid, $uid) {
  //Author Fields
  $author = array();
  if ($uid > 1) :
    $user = user_load($uid);
    //Author name
    $author['realname'] = fcc_es_get_author_name($user, $nid); // NOTE Uncomment for staging
    $author['name'] = $user->name; // NOTE Theme Function
    $author['url'] = url(drupal_get_path_alias("user/$uid"));
    if (!empty($user->picture)) {
      $author['picture'] = array(
        'uri' => $user->picture->uri,
        'width' => $user->picture->image_dimensions['width'],
        'height' => $user->picture->image_dimensions['height'],
      );
    }
    $author['byline'] = "By <a href='{$author['url']}'>{$author['name']}</a>";
    $author['bio'] = (!empty($user->field_bio)) ? $user->field_bio[LANGUAGE_NONE][0]['value'] : '';
    $author['email'] = (!empty($user->mail)) ? $user->mail : '';
    $author['phone'] = (!empty($user->field_phone_number)) ? $user->field_phone_number[LANGUAGE_NONE][0]['value'] : '';
    $author['twitter'] = (!empty($user->twitter)) ? $user->field_twitter[LANGUAGE_NONE][0]['value'] : '';
    $author['google'] = (!empty($user->field_google_plus)) ? $user->field_google_plus[LANGUAGE_NONE][0]['value'] : '';
  endif;
  return $author;
}

/**
 * Retrieve the author real name.
 * @param Object $author The Author object on which the operation is being performed.
 * @return string The name of the author.
 */
function fcc_es_get_author_name($author, $node) {
  if (isset($author->realname) && ( $author->realname !== '' )) :
    $author_name = $author->realname;
  elseif (( isset($author->field_first_name[$node->language][0]['value']) && $author->field_first_name[$node->language][0]['value'] ) || ( isset($author->field_last_name[$node->language][0]['value']) && $author->field_last_name[$node->language][0]['value'] )) :
    $author_name = $author->field_first_name[$node->language][0]['value'] . ' ' . $author->field_last_name[$node->language][0]['value'];
  else:
    if (isset($author->name)) :
      $author_name = $author->name;
    else :
      $author_name = '';
    endif;
  endif;
  return $author_name;
}

/**
 * Fetch all taxonomy terms from an entity.
 *
 * @param Object $entity
 *
 * @return array
 *   Array with tids of entity.
 */
function fcc_es_get_taxonomy_terms($entity) {

    $taxonomy_fields = array('field_category', 'field_tags');
    $terms = array();
    foreach ($taxonomy_fields as $field) {
        $entity_field = $entity->{$field}[LANGUAGE_NONE];
        if (is_array($entity_field) || $entity_field instanceof Traversable) {
            foreach ($entity_field as $tid) {
                $term = taxonomy_term_load($tid['tid']);
                if (!empty($term->tid)) {
                    $terms[$term->vocabulary_machine_name][] = array(
                      'tid' => $term->tid,
                      'name' => $term->name,
                    );
                }
            }
            unset($entity_field);
        }
    }
    unset($taxonomy_fields); // unset taxonomy_fields
    return $terms;
}
