<?php

/*------------------------------------------------------------------------------
# Module Setup
------------------------------------------------------------------------------*/

# Declare Constants
define( 'DEFAULT_CLUSTER_ID', 'elasticsearch' ); // TODO make dynamic?
define( 'ES_NODE_ID', 'fccnn' );  // TODO make dynamic?

# Load Includes
module_load_include( 'inc', 'fcc_elasticsearch_indexer', 'fcc_elasticsearch.types' );
module_load_include( 'inc', 'fcc_elasticsearch_indexer', 'fcc_elasticsearch_indexer.parameters' );
module_load_include( 'inc', 'fcc_elasticsearch_indexer', 'fcc_elasticsearch_indexer.fields' );
module_load_include( 'inc', 'fcc_elasticsearch_indexer', 'fcc_elasticsearch.sitenames' );


/*------------------------------------------------------------------------------
# Node Functions
------------------------------------------------------------------------------*/

/**
 * Prepares a node to be added to elastic
 *
 * @param object $node
 * @return array $params
 */
function _fcc_elasticsearch_indexer_prepare_node( $node ) {
	if ( ! is_object( $node ) ) {
		return;
	}

	// Populate the document metadata
	$params = _fcc_elasticsearch_indexer_prepare_document_metadata( $node );

	// Populate the document body fields based on article type
	if ( 'article' == $node->type ) {
		$params = _fcc_elasticsearch_indexer_prepare_article( $params, $node );
	} else {
		if ( drupal_is_cli() && function_exists( 'drush_main' ) ) { // Drush
			drush_set_error( 'Error: node type is currently unsupported.' );
			return;
		} else { // Drupal
			drupal_set_message( t( 'There was a problem saving this node to Elastic - node type is currently unsupported.' ) );
		}
	}

	return $params;
}

/**
 * Helper function that returns a node from Elastic by its nid.
 *
 * @param $client
 * @param object $node
 * @return mixed
 */
function _fcc_elasticsearch_indexer_perform_node_search_by_id( $client, $node ) {
	$search = array(
		'index' => ES_NODE_ID,
		'type' => $node->type,
		'version' => true,
		'body' => array(
		  'query' => array(
		    'match' => array(
		      'nid' => $node->nid,
		    ),
		  ),
		),
	);

	return $client->search( $search );
}

/**
 * Implements hook_node_insert().
 *
 * @param object $node
 */
function fcc_elasticsearch_indexer_node_insert( $node ) {
	$client = elasticsearch_connector_get_client_by_id( DEFAULT_CLUSTER_ID );
	$params = _fcc_elasticsearch_indexer_prepare_node( $node );

	if ( ! $params ) {
		drupal_set_message( t( 'There was a problem saving this node to Elastic.' ) );
		return;
	}

	$result = $client->index( $params );
	if ( $result && $result['created'] === false ) {
		drupal_set_message( t( 'There was a problem saving this node to Elastic.' ) );
		return;
	}

	drupal_set_message( t( 'The node has been saved to Elastic.' ) );
}

/**
 * Implements hook_node_update().
 *
 * @param object $node
 */
function fcc_elasticsearch_indexer_node_update( $node ) {
	if ( $node->is_new !== false ) {
		return;
	}

	$client = elasticsearch_connector_get_client_by_id( DEFAULT_CLUSTER_ID );

	if ( ! fcc_es_index_exists( ES_NODE_ID, $client ) ) {
		drupal_set_message( t( 'There was a problem updating this node in Elastic. (Index does not exist)' ) );
		return;
	}

	$params = _fcc_elasticsearch_indexer_prepare_node( $node );

	if ( ! $params ) {
		drupal_set_message( t( 'There was a problem updating this node in Elastic.' ) );
		return;
	}

	$result = _fcc_elasticsearch_indexer_perform_node_search_by_id( $client, $node );
	if ( $result && $result['hits']['total'] !== 1 ) {
		drupal_set_message( t( 'There was a problem updating this node in Elastic.' ) );
		return;
	}

	$params['id'] = $result['hits']['hits'][0]['_id'];
	$version = $result['hits']['hits'][0]['_version'];
	$index = $client->index( $params );

	if ( $index['_version'] !== $version + 1 ) {
		drupal_set_message( t( 'There was a problem updating this node in Elastic.' ) );
		return;
	}

	drupal_set_message( t( 'The node has been updated in Elastic.' ) );
}

/**
 * Implements hook_node_delete().
 *
 * @param object $node
 */
function fcc_elasticsearch_indexer_node_delete( $node ) {
	$client = elasticsearch_connector_get_client_by_id( DEFAULT_CLUSTER_ID );

	if ( ! fcc_es_index_exists( ES_NODE_ID, $client ) ) {
		drupal_set_message( t( 'There was a problem deleting this node in Elastic. (Index does not exist)' ) );
		return;
	}

	// If the node is in Elastic, remove it
	$result = _fcc_elasticsearch_indexer_perform_node_search_by_id( $client, $node );
	if ( $result && $result['hits']['total'] !== 1 ) {
		drupal_set_message( t( 'There was a problem deleting this node in Elastic.' ) );
		return;
	}

	$params = array(
	  'index' => ES_NODE_ID, // TODO make dynamic for property name
	  'type' => $node->type,
	  'id' => $result['hits']['hits'][0]['_id'],
	);

	$result = $client->delete( $params );
	if ( true !== $result && $result['found'] ) {
		drupal_set_message( t( 'There was a problem deleting this node in Elastic.' ) );
		return;
	}

	drupal_set_message( t( 'The node has been deleted in Elastic.' ) );
}

/*------------------------------------------------------------------------------
# Error Handling and Validation
------------------------------------------------------------------------------*/

/**
 * Verifies if a specific index exists
 *
 * @param string $index
 * @param mixed $client (optional)
 */
function fcc_es_index_exists( $index, $client = null ) {
	if ( ! $client ) {
		$client = elasticsearch_connector_get_client_by_id( DEFAULT_CLUSTER_ID );
	}
	$index_exists = $client->indices()->exists( array( 'index' => $index ) );
	return $index_exists;
}
