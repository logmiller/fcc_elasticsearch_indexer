<?php

# Declare Constants
define( 'DEFAULT_CLUSTER_ID', 'elasticsearch' ); // TODO make dynamic?
//define( 'ES_NODE_ID', 'fccnn' );

/**
 * Prepares a node to be added to elastic
 *
 * @param $node
 * @return array
 */
function _fcc_elasticsearch_indexer_prepare_node( $node ) {

	if ( ! is_object( $node ) ) {
		return;
	}

	//pc_init_pc(); // TODO remove or comment out for staging/production
	//pc( $node, '$node' ); // TODO remove or comment out for staging/production

	$nid = $node->nid;
	$uid = $node->uid;

	$params = array(
		'index' => 'fccnn', // NOTE: this may stay static for the sake of a flat index
		'type' => $node->type,
		'body' => array(),
	);

	// Add the simple properties
	$wanted = array( 'nid', 'title', 'uid', 'name', 'picture', 'created', 'changed', 'revision_timestamp', 'vid', 'revision_uid', 'type', 'status', 'promote', 'sticky', 'domain_site' );
	$exist = array_filter( $wanted, function( $property ) use ( $node ) {
		return property_exists( $node, $property );
	});
	foreach ( $exist as $field ) {
		$params['body'][ $field ] = $node->{$field};
	}

	// Add the article 'URL' link // NOTE leave protocol off for now
	if ( ! empty( $node->field_override_url ) ) {
		$url = $article_node->field_override_url[ $article_node->language ][0]['value']; // URL Override
	} else {
		$url = url( 'node/' . $nid ); // No URL Override
	}
	if ( $url ) {
		$params['body']['path'] = $url;
		$params['body']['url'] = $_SERVER['HTTP_HOST'] . $url;
	}

	// Add the 'Published' date field (if it exists)
	if ( $node->workbench_moderation->published ) {
		//$published = date( 'Y-m-d', $node->workbench_moderation->published->timestamp );
		$published = $node->workbench_moderation->published->timestamp;
		$params['body']['published'] = $published;
	}

	// Add the 'Author' fields // TODO Expand This
	$author = fcc_es_get_author_fields( $nid, $uid );
	if ( $author ) {
		$params['body']['author'] = $author;
	}

	// Add the 'Category' field (if it exists) // TODO Expand This
	$category_field = isset( $node->field_category ) ? field_get_items( 'node', $node, 'field_category' ) : false;
	if ( $category_field ) {
		$params['body']['category'] = '';
		//pc_init_pc();
		//pc($category_field[0]['name'], '$category_field');
		//unset( $category_field[0]->rdf_mapping );
		//pc_init_pc();
		//pc($node->field_category, '$category_field');
		//$params['body']['field_category'] = $category_field;
	}

	// Add the 'Tags' field (if it exists) // TODO Expand This
	$tags_field = isset( $node->field_tags ) ? field_get_items( 'node', $node, 'field_tags' ) : false;
	if ( $tags_field ) {
		$params['body']['tags'] = '';
	}

	// Add the 'Body' field (if it exists)
	$body_field = isset( $node->body ) ? field_get_items( 'node', $node, 'body' ) : false;
	if ( $body_field ) {
		$params['body']['body'] = $body_field;
	}

	// Add the 'Image' field (if it exists)
	$image_field = isset( $node->field_image ) ? field_get_items( 'node', $node, 'field_image' ) : false;
	if ( $image_field ) {
		$params['body']['field_image'] = array_map( function( $img ) {
			$img_alt = $img['alt'];
			$img_description = $img['description'];
			$img = file_load( $img['fid'] );
			$img->url = ( ! empty( $image_field[0]['uri'] ) ) ? file_create_url( $img_uri[0]['uri'] ) : file_create_url( $img->uri );
			$img->full_1000 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( 'full_1000', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->featured_860 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( '16x9_860', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->featured_620 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( '16x9_620', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->featured_430 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( '16x9_430', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->featured_315 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( '16x9_315', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->square_300 = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( 'square_300', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->medium = ( ! empty( $image_field[0]['uri'] ) ) ? image_style_url( 'medium', $image_field[0]['uri'] ) : file_create_url( $img->uri );
			$img->image_caption = htmlentities( $img_alt, ENT_QUOTES, 'UTF-8' );
			$img->image_description = $img_description;
			return $img;
		}, $image_field);
	}
	return $params;
}

/**
 * Helper function that returns a node from Elastic by its nid.
 *
 * @param $client
 * @param $node
 * @return mixed
 */
function _fcc_elasticsearch_indexer_perform_node_search_by_id( $client, $node ) {
	$search = array(
		'index' => ES_NODE_ID, // TODO make dynamic for property name
		'type' => $node->type,
		'version' => true,
		'body' => array(
		  'query' => array(
		    'match' => array(
		      'nid' => $node->nid,
		    ),
		  ),
		),
	);

	return $client->search( $search );
}

/**
 * Implements hook_node_insert().
 */
function fcc_elasticsearch_indexer_node_insert( $node ) {
	$client = elasticsearch_connector_get_client_by_id( DEFAULT_CLUSTER_ID );
	$params = _fcc_elasticsearch_indexer_prepare_node( $node );

	if ( ! $params ) {
		drupal_set_message( t( 'There was a problem saving this node to Elastic.' ) );
		return;
	}

	$result = $client->index( $params );
	if ( $result && $result['created'] === false ) {
		drupal_set_message( t( 'There was a problem saving this node to Elastic.' ) );
		return;
	}

	drupal_set_message( t( 'The node has been saved to Elastic.' ) );
}

/**
 * Implements hook_node_update().
 */
function fcc_elasticsearch_indexer_node_update( $node ) {
	if ( $node->is_new !== false ) {
		return;
	}

	$client = elasticsearch_connector_get_client_by_id( DEFAULT_CLUSTER_ID );
	$params = _fcc_elasticsearch_indexer_prepare_node( $node );

	if ( ! $params ) {
		drupal_set_message( t( 'There was a problem updating this node in Elastic.' ) );
		return;
	}

	$result = _fcc_elasticsearch_indexer_perform_node_search_by_id( $client, $node );
	if ( $result && $result['hits']['total'] !== 1 ) {
		drupal_set_message( t( 'There was a problem updating this node in Elastic.' ) );
		return;
	}

	$params['id'] = $result['hits']['hits'][0]['_id'];
	$version = $result['hits']['hits'][0]['_version'];
	$index = $client->index( $params );

	if ( $index['_version'] !== $version + 1 ) {
		drupal_set_message( t( 'There was a problem updating this node in Elastic.' ) );
		return;
	}

	drupal_set_message( t( 'The node has been updated in Elastic.' ) );
}

/**
 * Implements hook_node_delete().
 */
function fcc_elasticsearch_indexer_node_delete( $node ) {
	$client = elasticsearch_connector_get_client_by_id( DEFAULT_CLUSTER_ID );

	// If the node is in Elastic, remove it
	$result = _fcc_elasticsearch_indexer_perform_node_search_by_id( $client, $node );
	if ( $result && $result['hits']['total'] !== 1 ) {
		drupal_set_message( t( 'There was a problem deleting this node in Elastic.' ) );
		return;
	}

	$params = array(
	  'index' => ES_NODE_ID, // TODO make dynamic for property name
	  'type' => $node->type,
	  'id' => $result['hits']['hits'][0]['_id'],
	);

	$result = $client->delete( $params );
	if ( $result && $result['found'] !== true ) {
		drupal_set_message( t( 'There was a problem deleting this node in Elastic.' ) );
		return;
	}

	drupal_set_message( t( 'The node has been deleted in Elastic.' ) );
}


/*------------------------------------------------------------------------------
# FCC Custom Retrieval Functions
------------------------------------------------------------------------------*/

function fcc_es_get_author_fields( $nid, $uid ) {
  //Author Fields
  $author = array();
	//$author = user_load( $uid );
  if ( $uid > 1 ) :
    $user = user_load( $uid );
    //Author name
    //$author['name'] = fcc_es_get_author_name( $user, $nid ); // NOTE Uncomment for staging
		$author['name'] = '{{Author Name}}'; // NOTE Theme Function
    $author['url'] = url( drupal_get_path_alias( "user/$uid" ) );
    $author['byline'] = "By <a href='{$author['url']}'>{$author['name']}</a>";
    //Author Block
    /*$target = array( 'Reporter', 'Designer', 'Site Editor', 'Universal Editor', 'administrator' ); // NOTE Uncomment for staging
    if (count(array_intersect($user->roles, $target)) > 0) :
      if (!empty($user->picture)) {
        $author['picture'] = array(
          'uri' => $user->picture->uri,
          'width' => $user->picture->image_dimensions['width'],
          'height' => $user->picture->image_dimensions['height'],
        );
      }
      $author['info'] = array('name' => $author['name'], 'url' => $author['url']);
      $author['bio'] = (!empty($user->field_bio)) ? $user->field_bio[LANGUAGE_NONE][0]['value'] : '';
      $author['email'] = (!empty($user->mail)) ? $user->mail : '';
      $author['phone'] = (!empty($user->field_phone_number)) ? $user->field_phone_number[LANGUAGE_NONE][0]['value'] : '';
      $author['twitter'] = (!empty($user->twitter)) ? $user->field_twitter[LANGUAGE_NONE][0]['value'] : '';
      $author['google'] = (!empty($user->field_google_plus)) ? $user->field_google_plus[LANGUAGE_NONE][0]['value'] : '';
    elseif (in_array('Open Author', $user->roles)):
    //@TODO verify open author
	endif;*/
  else :
    $author['byline'] = "Posted";
    $author['name'] = '';
  endif;
  return $author;
}

/**
 * Render the author name for node pages.
 *
 * @param Object $author The Author object on which the operation is being performed.
 * @return string The name of the author.
 */
function fcc_es_get_author_name( $author, $node ) {
	if ( isset( $author->realname ) && ( $author->realname !== '' ) ) :
		$author_name = $author->realname;
  elseif ( ( isset( $author->field_first_name[$node->language][0]['value'] ) && $author->field_first_name[$node->language][0]['value'] ) || ( isset( $author->field_last_name[$node->language][0]['value']) && $author->field_last_name[$node->language][0]['value'] ) ) :
    $author_name = $author->field_first_name[$node->language][0]['value'] . ' ' . $author->field_last_name[$node->language][0]['value'];
  else:
    if ( isset( $author->name ) ) :
      $author_name = $author->name;
    else :
			$author_name = '';
    endif;
  endif;
  return $author_name;
}
